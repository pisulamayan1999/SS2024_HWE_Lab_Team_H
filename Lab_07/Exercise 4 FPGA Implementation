entity Counter_7Segment is
    Port (
        CLK : in STD_LOGIC;
        RST : in STD_LOGIC;
        EN  : in STD_LOGIC;
        SEG: out STD_LOGIC_VECTOR(6 downto 0); -- 7-segment display
        AN  : out STD_LOGIC_VECTOR(3 downto 0)  -- Anode control
    );
end Counter_7Segment;

architecture Behavioral of Counter_7Segment is
    signal cnt : STD_LOGIC_VECTOR(3 downto 0) := (others => '0');
    signal seg : STD_LOGIC_VECTOR(6 downto 0);
begin
    process (CLK, RST)
    begin
        if RST = '1' then
            cnt <= (others => '0');
        elsif rising_edge(CLK) then
            if EN = '1' then
                cnt <= cnt + 1;
            end if;
        end if;
    end process;

    -- Convert binary to 7-segment display
    process (cnt)
    begin
        case cnt is
            when "0000" => seg <= "0000001"; -- 0
            when "0001" => seg <= "1001111"; -- 1
            when "0010" => seg <= "0010010"; -- 2
            when "0011" => seg <= "0000110"; -- 3
            when "0100" => seg <= "1001100"; -- 4
            when "0101" => seg <= "0100100"; -- 5
            when "0110" => seg <= "0100000"; -- 6
            when "0111" => seg <= "0001111"; -- 7
            when "1000" => seg <= "0000000"; -- 8
            when "1001" => seg <= "0000100"; -- 9
            when others => seg <= "1111111"; -- Display off
        end case;
    end process;

    SEG <= seg;

    -- Simple anode control for single 7-segment display (assuming one digit for simplicity)
    AN <= "1110"; -- Enable the first 7-segment display
end Behavioral;
