library std;
use std.standard.all;

entity tb_ClockDivider is
end tb_ClockDivider;

architecture Behavioral of tb_ClockDivider is
    signal CLK    : bit := '0';
    signal RESET  : bit := '0';
    signal CLK_N  : bit;

    -- Clock period for CLK signal (adjust as necessary)
    constant CLK_PERIOD : time := 10 ns;
begin
    -- Instantiate the ClockDivider component
    uut: entity work.ClockDivider
        port map (
            CLK    => CLK,
            RESET  => RESET,
            CLK_N  => CLK_N
        );

    -- Generate the CLK signal
    CLK_process : process
    begin
        while true loop
            CLK <= '0';
            wait for CLK_PERIOD / 2;
            CLK <= '1';
            wait for CLK_PERIOD / 2;
        end loop;
    end process;

    -- Test process
    test_process : process
    begin
        -- Apply reset
        RESET <= '1';
        wait for 20 ns;
        RESET <= '0';

        -- Wait for a significant amount of time to observe CLK_N
        wait for 1000 ns;

        -- Stop simulation
        wait;
    end process;
end Behavioral;
