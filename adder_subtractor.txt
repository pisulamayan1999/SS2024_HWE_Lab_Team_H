library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity adder_subtractor is
    Port (
        a : in STD_LOGIC_VECTOR(3 downto 0);
        b : in STD_LOGIC_VECTOR(3 downto 0);
        mode : in STD_LOGIC;  -- Mode: 0 for addition, 1 for subtraction
        result : out STD_LOGIC_VECTOR(3 downto 0);
        cout : out STD_LOGIC  -- Carry out or Borrow out
    );
end adder_subtractor;

architecture Behavioral of adder_subtractor is
    component ripple_carry_adder
        Port (
            a : in STD_LOGIC_VECTOR(3 downto 0);
            b : in STD_LOGIC_VECTOR(3 downto 0);
            cin : in STD_LOGIC;
            sum : out STD_LOGIC_VECTOR(3 downto 0);
            cout : out STD_LOGIC
        );
    end component;

    signal b_xor_mode : STD_LOGIC_VECTOR(3 downto 0);

begin
    -- XOR b with mode to get b or its complement
    b_xor_mode <= b XOR (mode & mode & mode & mode);

    -- Instantiate the Ripple Carry Adder
    RCA: ripple_carry_adder Port Map (
        a => a,
        b => b_xor_mode,
        cin => mode,  -- Carry in is mode for subtraction (1) or addition (0)
        sum => result,
        cout => cout
    );

end Behavioral;
